// This file is generated by omniidl (C++ backend) - omniORB_4_1. Do not edit.

#include "pcProcessPort.hh"

OMNI_USING_NAMESPACE(omni)

static const char* _0RL_dyn_library_version = omniORB_4_1_dyn;

static ::CORBA::TypeCode::_Tracker _0RL_tcTrack(__FILE__);

static CORBA::TypeCode_ptr _0RL_tc_ComPcProcess_mMatrix4__4 = CORBA::TypeCode::PR_alias_tc("IDL:ComPcProcess/Matrix4_4:1.0", "Matrix4_4", CORBA::TypeCode::PR_array_tc(4, CORBA::TypeCode::PR_array_tc(4, CORBA::TypeCode::PR_double_tc(), &_0RL_tcTrack), &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr ComPcProcess::_tc_Matrix4_4 = _0RL_tc_ComPcProcess_mMatrix4__4;

const CORBA::TypeCode_ptr _tc_ComPcProcess = CORBA::TypeCode::PR_interface_tc("IDL:ComPcProcess:1.0", "ComPcProcess", &_0RL_tcTrack);

static void _0RL_ComPcProcess_mMatrix4__4_marshal_fn(cdrStream& _s, void* _v)
{
  ComPcProcess::Matrix4_4_slice* _a = (ComPcProcess::Matrix4_4_slice*)_v;
  
#ifndef OMNI_MIXED_ENDIAN_DOUBLE
  if (! _s.marshal_byte_swap()) {
    _s.put_octet_array((_CORBA_Octet*)(_a),128,omni::ALIGN_8);
  }
  else 
#endif
  {
    _s.declareArrayLength(omni::ALIGN_8, 128);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 4; _0i0++){
      for (_CORBA_ULong _0i1 = 0; _0i1 < 4; _0i1++){
        _a[_0i0][_0i1] >>= _s;
      }
    }
  }

}
static void _0RL_ComPcProcess_mMatrix4__4_unmarshal_fn(cdrStream& _s, void*& _v)
{
  ComPcProcess::Matrix4_4_slice* _a = ComPcProcess::Matrix4_4_alloc();
  _s.unmarshalArrayDouble((_CORBA_Double*)(_a), 16);

  _v = _a;
}
static void _0RL_ComPcProcess_mMatrix4__4_destructor_fn(void* _v)
{
  ComPcProcess::Matrix4_4_slice* _a = (ComPcProcess::Matrix4_4_slice*)_v;
  ComPcProcess::Matrix4_4_free(_a);
}

void operator<<=(::CORBA::Any& _a, const ComPcProcess::Matrix4_4_forany& _s)
{
  ComPcProcess::Matrix4_4_slice* _v;
  if (!_s.NP_nocopy())
    _v = ComPcProcess::Matrix4_4_dup(_s);
  else
    _v = _s.NP_getSlice();

  _a.PR_insert(_0RL_tc_ComPcProcess_mMatrix4__4,
               _0RL_ComPcProcess_mMatrix4__4_marshal_fn,
               _0RL_ComPcProcess_mMatrix4__4_destructor_fn,
               _v);
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, ComPcProcess::Matrix4_4_forany& _s)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_ComPcProcess_mMatrix4__4,
                    _0RL_ComPcProcess_mMatrix4__4_unmarshal_fn,
                    _0RL_ComPcProcess_mMatrix4__4_marshal_fn,
                    _0RL_ComPcProcess_mMatrix4__4_destructor_fn,
                    _v)) {
    _s = (ComPcProcess::Matrix4_4_slice*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_ComPcProcess_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_ComPcProcess_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(ComPcProcess::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_ComPcProcess_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, ComPcProcess_ptr _o)
{
  ComPcProcess_ptr _no = ComPcProcess::_duplicate(_o);
  _a.PR_insert(_tc_ComPcProcess,
               _0RL_ComPcProcess_marshal_fn,
               _0RL_ComPcProcess_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, ComPcProcess_ptr* _op)
{
  _a.PR_insert(_tc_ComPcProcess,
               _0RL_ComPcProcess_marshal_fn,
               _0RL_ComPcProcess_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = ComPcProcess::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, ComPcProcess_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(_tc_ComPcProcess,
                    _0RL_ComPcProcess_unmarshal_fn,
                    _0RL_ComPcProcess_marshal_fn,
                    _0RL_ComPcProcess_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (ComPcProcess_ptr)_r->_ptrToObjRef(ComPcProcess::_PD_repoId);
    else
      _o = ComPcProcess::_nil();
    return 1;
  }
  return 0;
}

